// Code generated by MockGen. DO NOT EDIT.
// Source: submission.go

// Package submissions is a generated GoMock package.
package submissions

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	attachments "github.com/maxshend/grader/pkg/attachments"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepositoryInterface) Create(userID, assignmentID int64) (*Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, assignmentID)
	ret0, _ := ret[0].(*Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryInterfaceMockRecorder) Create(userID, assignmentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepositoryInterface)(nil).Create), userID, assignmentID)
}

// CreateSubmissionAttachments mocks base method.
func (m *MockRepositoryInterface) CreateSubmissionAttachments(arg0 int64, arg1 []*attachments.Attachment) ([]*Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubmissionAttachments", arg0, arg1)
	ret0, _ := ret[0].([]*Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubmissionAttachments indicates an expected call of CreateSubmissionAttachments.
func (mr *MockRepositoryInterfaceMockRecorder) CreateSubmissionAttachments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubmissionAttachments", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateSubmissionAttachments), arg0, arg1)
}

// GetByAssignment mocks base method.
func (m *MockRepositoryInterface) GetByAssignment(assignmentID int64, limit, offset int) ([]*Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAssignment", assignmentID, limit, offset)
	ret0, _ := ret[0].([]*Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAssignment indicates an expected call of GetByAssignment.
func (mr *MockRepositoryInterfaceMockRecorder) GetByAssignment(assignmentID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAssignment", reflect.TypeOf((*MockRepositoryInterface)(nil).GetByAssignment), assignmentID, limit, offset)
}

// GetByID mocks base method.
func (m *MockRepositoryInterface) GetByID(arg0 int64) (*Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryInterfaceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetByID), arg0)
}

// GetByUserAssignment mocks base method.
func (m *MockRepositoryInterface) GetByUserAssignment(assignmentID, userID int64, limit, offset int) ([]*Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserAssignment", assignmentID, userID, limit, offset)
	ret0, _ := ret[0].([]*Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserAssignment indicates an expected call of GetByUserAssignment.
func (mr *MockRepositoryInterfaceMockRecorder) GetByUserAssignment(assignmentID, userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserAssignment", reflect.TypeOf((*MockRepositoryInterface)(nil).GetByUserAssignment), assignmentID, userID, limit, offset)
}

// GetSubmissionAttachments mocks base method.
func (m *MockRepositoryInterface) GetSubmissionAttachments(arg0 int64) ([]*Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubmissionAttachments", arg0)
	ret0, _ := ret[0].([]*Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubmissionAttachments indicates an expected call of GetSubmissionAttachments.
func (mr *MockRepositoryInterfaceMockRecorder) GetSubmissionAttachments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubmissionAttachments", reflect.TypeOf((*MockRepositoryInterface)(nil).GetSubmissionAttachments), arg0)
}

// Update mocks base method.
func (m *MockRepositoryInterface) Update(arg0 *Submission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepositoryInterface)(nil).Update), arg0)
}
