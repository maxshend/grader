// Code generated by MockGen. DO NOT EDIT.
// Source: assignment.go

// Package assignments is a generated GoMock package.
package assignments

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepositoryInterface) Create(creatorID int64, title, description, graderURL, container, partID string, files []string) (*Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", creatorID, title, description, graderURL, container, partID, files)
	ret0, _ := ret[0].(*Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryInterfaceMockRecorder) Create(creatorID, title, description, graderURL, container, partID, files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepositoryInterface)(nil).Create), creatorID, title, description, graderURL, container, partID, files)
}

// GetAllByCreator mocks base method.
func (m *MockRepositoryInterface) GetAllByCreator(creatorID int64, limit, offset int) ([]*Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByCreator", creatorID, limit, offset)
	ret0, _ := ret[0].([]*Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByCreator indicates an expected call of GetAllByCreator.
func (mr *MockRepositoryInterfaceMockRecorder) GetAllByCreator(creatorID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByCreator", reflect.TypeOf((*MockRepositoryInterface)(nil).GetAllByCreator), creatorID, limit, offset)
}

// GetByID mocks base method.
func (m *MockRepositoryInterface) GetByID(arg0 int64) (*Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryInterfaceMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetByID), arg0)
}

// GetByIDByCreator mocks base method.
func (m *MockRepositoryInterface) GetByIDByCreator(id, creatorID int64) (*Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDByCreator", id, creatorID)
	ret0, _ := ret[0].(*Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDByCreator indicates an expected call of GetByIDByCreator.
func (mr *MockRepositoryInterfaceMockRecorder) GetByIDByCreator(id, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDByCreator", reflect.TypeOf((*MockRepositoryInterface)(nil).GetByIDByCreator), id, creatorID)
}

// GetByTitle mocks base method.
func (m *MockRepositoryInterface) GetByTitle(arg0 string) (*Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitle", arg0)
	ret0, _ := ret[0].(*Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitle indicates an expected call of GetByTitle.
func (mr *MockRepositoryInterfaceMockRecorder) GetByTitle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitle", reflect.TypeOf((*MockRepositoryInterface)(nil).GetByTitle), arg0)
}

// GetByUserID mocks base method.
func (m *MockRepositoryInterface) GetByUserID(userID int64, limit, offset int) ([]*Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID, limit, offset)
	ret0, _ := ret[0].([]*Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockRepositoryInterfaceMockRecorder) GetByUserID(userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetByUserID), userID, limit, offset)
}

// Update mocks base method.
func (m *MockRepositoryInterface) Update(arg0 *Assignment) (*Assignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*Assignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepositoryInterface)(nil).Update), arg0)
}
