// Code generated by MockGen. DO NOT EDIT.
// Source: submission_task_service.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	io "io"
	net "net"
	http "net/http"
	reflect "reflect"

	types "github.com/docker/docker/api/types"
	dockercontainer "github.com/docker/docker/api/types/container"
	events "github.com/docker/docker/api/types/events"
	filters "github.com/docker/docker/api/types/filters"
	dockerimage "github.com/docker/docker/api/types/image"
	network "github.com/docker/docker/api/types/network"
	registry "github.com/docker/docker/api/types/registry"
	swarm "github.com/docker/docker/api/types/swarm"
	volume "github.com/docker/docker/api/types/volume"
	gomock "github.com/golang/mock/gomock"
	submission_tasks "github.com/maxshend/grader/cmd/grader_runner/app/pkg/submission_tasks"
	v1 "github.com/opencontainers/image-spec/specs-go/v1"
)

// MockDockerClientInterface is a mock of DockerClientInterface interface.
type MockDockerClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDockerClientInterfaceMockRecorder
}

// MockDockerClientInterfaceMockRecorder is the mock recorder for MockDockerClientInterface.
type MockDockerClientInterfaceMockRecorder struct {
	mock *MockDockerClientInterface
}

// NewMockDockerClientInterface creates a new mock instance.
func NewMockDockerClientInterface(ctrl *gomock.Controller) *MockDockerClientInterface {
	mock := &MockDockerClientInterface{ctrl: ctrl}
	mock.recorder = &MockDockerClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerClientInterface) EXPECT() *MockDockerClientInterfaceMockRecorder {
	return m.recorder
}

// BuildCachePrune mocks base method.
func (m *MockDockerClientInterface) BuildCachePrune(ctx context.Context, opts types.BuildCachePruneOptions) (*types.BuildCachePruneReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildCachePrune", ctx, opts)
	ret0, _ := ret[0].(*types.BuildCachePruneReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildCachePrune indicates an expected call of BuildCachePrune.
func (mr *MockDockerClientInterfaceMockRecorder) BuildCachePrune(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildCachePrune", reflect.TypeOf((*MockDockerClientInterface)(nil).BuildCachePrune), ctx, opts)
}

// BuildCancel mocks base method.
func (m *MockDockerClientInterface) BuildCancel(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildCancel", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildCancel indicates an expected call of BuildCancel.
func (mr *MockDockerClientInterfaceMockRecorder) BuildCancel(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildCancel", reflect.TypeOf((*MockDockerClientInterface)(nil).BuildCancel), ctx, id)
}

// ClientVersion mocks base method.
func (m *MockDockerClientInterface) ClientVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientVersion indicates an expected call of ClientVersion.
func (mr *MockDockerClientInterfaceMockRecorder) ClientVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientVersion", reflect.TypeOf((*MockDockerClientInterface)(nil).ClientVersion))
}

// Close mocks base method.
func (m *MockDockerClientInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDockerClientInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDockerClientInterface)(nil).Close))
}

// ConfigCreate mocks base method.
func (m *MockDockerClientInterface) ConfigCreate(ctx context.Context, config swarm.ConfigSpec) (types.ConfigCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigCreate", ctx, config)
	ret0, _ := ret[0].(types.ConfigCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigCreate indicates an expected call of ConfigCreate.
func (mr *MockDockerClientInterfaceMockRecorder) ConfigCreate(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigCreate", reflect.TypeOf((*MockDockerClientInterface)(nil).ConfigCreate), ctx, config)
}

// ConfigInspectWithRaw mocks base method.
func (m *MockDockerClientInterface) ConfigInspectWithRaw(ctx context.Context, name string) (swarm.Config, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigInspectWithRaw", ctx, name)
	ret0, _ := ret[0].(swarm.Config)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ConfigInspectWithRaw indicates an expected call of ConfigInspectWithRaw.
func (mr *MockDockerClientInterfaceMockRecorder) ConfigInspectWithRaw(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigInspectWithRaw", reflect.TypeOf((*MockDockerClientInterface)(nil).ConfigInspectWithRaw), ctx, name)
}

// ConfigList mocks base method.
func (m *MockDockerClientInterface) ConfigList(ctx context.Context, options types.ConfigListOptions) ([]swarm.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigList", ctx, options)
	ret0, _ := ret[0].([]swarm.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigList indicates an expected call of ConfigList.
func (mr *MockDockerClientInterfaceMockRecorder) ConfigList(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigList", reflect.TypeOf((*MockDockerClientInterface)(nil).ConfigList), ctx, options)
}

// ConfigRemove mocks base method.
func (m *MockDockerClientInterface) ConfigRemove(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigRemove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigRemove indicates an expected call of ConfigRemove.
func (mr *MockDockerClientInterfaceMockRecorder) ConfigRemove(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigRemove", reflect.TypeOf((*MockDockerClientInterface)(nil).ConfigRemove), ctx, id)
}

// ConfigUpdate mocks base method.
func (m *MockDockerClientInterface) ConfigUpdate(ctx context.Context, id string, version swarm.Version, config swarm.ConfigSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigUpdate", ctx, id, version, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigUpdate indicates an expected call of ConfigUpdate.
func (mr *MockDockerClientInterfaceMockRecorder) ConfigUpdate(ctx, id, version, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigUpdate", reflect.TypeOf((*MockDockerClientInterface)(nil).ConfigUpdate), ctx, id, version, config)
}

// ContainerAttach mocks base method.
func (m *MockDockerClientInterface) ContainerAttach(ctx context.Context, container string, options types.ContainerAttachOptions) (types.HijackedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerAttach", ctx, container, options)
	ret0, _ := ret[0].(types.HijackedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerAttach indicates an expected call of ContainerAttach.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerAttach(ctx, container, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerAttach", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerAttach), ctx, container, options)
}

// ContainerCommit mocks base method.
func (m *MockDockerClientInterface) ContainerCommit(ctx context.Context, container string, options types.ContainerCommitOptions) (types.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerCommit", ctx, container, options)
	ret0, _ := ret[0].(types.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerCommit indicates an expected call of ContainerCommit.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerCommit(ctx, container, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerCommit", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerCommit), ctx, container, options)
}

// ContainerCreate mocks base method.
func (m *MockDockerClientInterface) ContainerCreate(ctx context.Context, config *dockercontainer.Config, hostConfig *dockercontainer.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string) (dockercontainer.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerCreate", ctx, config, hostConfig, networkingConfig, platform, containerName)
	ret0, _ := ret[0].(dockercontainer.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerCreate indicates an expected call of ContainerCreate.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerCreate(ctx, config, hostConfig, networkingConfig, platform, containerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerCreate", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerCreate), ctx, config, hostConfig, networkingConfig, platform, containerName)
}

// ContainerDiff mocks base method.
func (m *MockDockerClientInterface) ContainerDiff(ctx context.Context, container string) ([]dockercontainer.FilesystemChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerDiff", ctx, container)
	ret0, _ := ret[0].([]dockercontainer.FilesystemChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerDiff indicates an expected call of ContainerDiff.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerDiff(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerDiff", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerDiff), ctx, container)
}

// ContainerExecAttach mocks base method.
func (m *MockDockerClientInterface) ContainerExecAttach(ctx context.Context, execID string, config types.ExecStartCheck) (types.HijackedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerExecAttach", ctx, execID, config)
	ret0, _ := ret[0].(types.HijackedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerExecAttach indicates an expected call of ContainerExecAttach.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerExecAttach(ctx, execID, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerExecAttach", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerExecAttach), ctx, execID, config)
}

// ContainerExecCreate mocks base method.
func (m *MockDockerClientInterface) ContainerExecCreate(ctx context.Context, container string, config types.ExecConfig) (types.IDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerExecCreate", ctx, container, config)
	ret0, _ := ret[0].(types.IDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerExecCreate indicates an expected call of ContainerExecCreate.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerExecCreate(ctx, container, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerExecCreate", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerExecCreate), ctx, container, config)
}

// ContainerExecInspect mocks base method.
func (m *MockDockerClientInterface) ContainerExecInspect(ctx context.Context, execID string) (types.ContainerExecInspect, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerExecInspect", ctx, execID)
	ret0, _ := ret[0].(types.ContainerExecInspect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerExecInspect indicates an expected call of ContainerExecInspect.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerExecInspect(ctx, execID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerExecInspect", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerExecInspect), ctx, execID)
}

// ContainerExecResize mocks base method.
func (m *MockDockerClientInterface) ContainerExecResize(ctx context.Context, execID string, options types.ResizeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerExecResize", ctx, execID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerExecResize indicates an expected call of ContainerExecResize.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerExecResize(ctx, execID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerExecResize", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerExecResize), ctx, execID, options)
}

// ContainerExecStart mocks base method.
func (m *MockDockerClientInterface) ContainerExecStart(ctx context.Context, execID string, config types.ExecStartCheck) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerExecStart", ctx, execID, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerExecStart indicates an expected call of ContainerExecStart.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerExecStart(ctx, execID, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerExecStart", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerExecStart), ctx, execID, config)
}

// ContainerExport mocks base method.
func (m *MockDockerClientInterface) ContainerExport(ctx context.Context, container string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerExport", ctx, container)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerExport indicates an expected call of ContainerExport.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerExport(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerExport", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerExport), ctx, container)
}

// ContainerInspect mocks base method.
func (m *MockDockerClientInterface) ContainerInspect(ctx context.Context, container string) (types.ContainerJSON, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerInspect", ctx, container)
	ret0, _ := ret[0].(types.ContainerJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerInspect indicates an expected call of ContainerInspect.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerInspect(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerInspect", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerInspect), ctx, container)
}

// ContainerInspectWithRaw mocks base method.
func (m *MockDockerClientInterface) ContainerInspectWithRaw(ctx context.Context, container string, getSize bool) (types.ContainerJSON, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerInspectWithRaw", ctx, container, getSize)
	ret0, _ := ret[0].(types.ContainerJSON)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ContainerInspectWithRaw indicates an expected call of ContainerInspectWithRaw.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerInspectWithRaw(ctx, container, getSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerInspectWithRaw", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerInspectWithRaw), ctx, container, getSize)
}

// ContainerKill mocks base method.
func (m *MockDockerClientInterface) ContainerKill(ctx context.Context, container, signal string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerKill", ctx, container, signal)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerKill indicates an expected call of ContainerKill.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerKill(ctx, container, signal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerKill", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerKill), ctx, container, signal)
}

// ContainerList mocks base method.
func (m *MockDockerClientInterface) ContainerList(ctx context.Context, options types.ContainerListOptions) ([]types.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerList", ctx, options)
	ret0, _ := ret[0].([]types.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerList indicates an expected call of ContainerList.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerList(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerList", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerList), ctx, options)
}

// ContainerLogs mocks base method.
func (m *MockDockerClientInterface) ContainerLogs(ctx context.Context, container string, options types.ContainerLogsOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerLogs", ctx, container, options)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerLogs indicates an expected call of ContainerLogs.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerLogs(ctx, container, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerLogs", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerLogs), ctx, container, options)
}

// ContainerPause mocks base method.
func (m *MockDockerClientInterface) ContainerPause(ctx context.Context, container string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerPause", ctx, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerPause indicates an expected call of ContainerPause.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerPause(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerPause", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerPause), ctx, container)
}

// ContainerRemove mocks base method.
func (m *MockDockerClientInterface) ContainerRemove(ctx context.Context, container string, options types.ContainerRemoveOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerRemove", ctx, container, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerRemove indicates an expected call of ContainerRemove.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerRemove(ctx, container, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerRemove", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerRemove), ctx, container, options)
}

// ContainerRename mocks base method.
func (m *MockDockerClientInterface) ContainerRename(ctx context.Context, container, newContainerName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerRename", ctx, container, newContainerName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerRename indicates an expected call of ContainerRename.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerRename(ctx, container, newContainerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerRename", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerRename), ctx, container, newContainerName)
}

// ContainerResize mocks base method.
func (m *MockDockerClientInterface) ContainerResize(ctx context.Context, container string, options types.ResizeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerResize", ctx, container, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerResize indicates an expected call of ContainerResize.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerResize(ctx, container, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerResize", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerResize), ctx, container, options)
}

// ContainerRestart mocks base method.
func (m *MockDockerClientInterface) ContainerRestart(ctx context.Context, container string, options dockercontainer.StopOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerRestart", ctx, container, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerRestart indicates an expected call of ContainerRestart.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerRestart(ctx, container, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerRestart", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerRestart), ctx, container, options)
}

// ContainerStart mocks base method.
func (m *MockDockerClientInterface) ContainerStart(ctx context.Context, container string, options types.ContainerStartOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStart", ctx, container, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStart indicates an expected call of ContainerStart.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerStart(ctx, container, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStart", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerStart), ctx, container, options)
}

// ContainerStatPath mocks base method.
func (m *MockDockerClientInterface) ContainerStatPath(ctx context.Context, container, path string) (types.ContainerPathStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStatPath", ctx, container, path)
	ret0, _ := ret[0].(types.ContainerPathStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerStatPath indicates an expected call of ContainerStatPath.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerStatPath(ctx, container, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStatPath", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerStatPath), ctx, container, path)
}

// ContainerStats mocks base method.
func (m *MockDockerClientInterface) ContainerStats(ctx context.Context, container string, stream bool) (types.ContainerStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStats", ctx, container, stream)
	ret0, _ := ret[0].(types.ContainerStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerStats indicates an expected call of ContainerStats.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerStats(ctx, container, stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStats", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerStats), ctx, container, stream)
}

// ContainerStatsOneShot mocks base method.
func (m *MockDockerClientInterface) ContainerStatsOneShot(ctx context.Context, container string) (types.ContainerStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStatsOneShot", ctx, container)
	ret0, _ := ret[0].(types.ContainerStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerStatsOneShot indicates an expected call of ContainerStatsOneShot.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerStatsOneShot(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStatsOneShot", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerStatsOneShot), ctx, container)
}

// ContainerStop mocks base method.
func (m *MockDockerClientInterface) ContainerStop(ctx context.Context, container string, options dockercontainer.StopOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStop", ctx, container, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStop indicates an expected call of ContainerStop.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerStop(ctx, container, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStop", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerStop), ctx, container, options)
}

// ContainerTop mocks base method.
func (m *MockDockerClientInterface) ContainerTop(ctx context.Context, container string, arguments []string) (dockercontainer.ContainerTopOKBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerTop", ctx, container, arguments)
	ret0, _ := ret[0].(dockercontainer.ContainerTopOKBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerTop indicates an expected call of ContainerTop.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerTop(ctx, container, arguments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerTop", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerTop), ctx, container, arguments)
}

// ContainerUnpause mocks base method.
func (m *MockDockerClientInterface) ContainerUnpause(ctx context.Context, container string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerUnpause", ctx, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerUnpause indicates an expected call of ContainerUnpause.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerUnpause(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerUnpause", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerUnpause), ctx, container)
}

// ContainerUpdate mocks base method.
func (m *MockDockerClientInterface) ContainerUpdate(ctx context.Context, container string, updateConfig dockercontainer.UpdateConfig) (dockercontainer.ContainerUpdateOKBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerUpdate", ctx, container, updateConfig)
	ret0, _ := ret[0].(dockercontainer.ContainerUpdateOKBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerUpdate indicates an expected call of ContainerUpdate.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerUpdate(ctx, container, updateConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerUpdate", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerUpdate), ctx, container, updateConfig)
}

// ContainerWait mocks base method.
func (m *MockDockerClientInterface) ContainerWait(ctx context.Context, container string, condition dockercontainer.WaitCondition) (<-chan dockercontainer.WaitResponse, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerWait", ctx, container, condition)
	ret0, _ := ret[0].(<-chan dockercontainer.WaitResponse)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// ContainerWait indicates an expected call of ContainerWait.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerWait(ctx, container, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerWait", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerWait), ctx, container, condition)
}

// ContainersPrune mocks base method.
func (m *MockDockerClientInterface) ContainersPrune(ctx context.Context, pruneFilters filters.Args) (types.ContainersPruneReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainersPrune", ctx, pruneFilters)
	ret0, _ := ret[0].(types.ContainersPruneReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainersPrune indicates an expected call of ContainersPrune.
func (mr *MockDockerClientInterfaceMockRecorder) ContainersPrune(ctx, pruneFilters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainersPrune", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainersPrune), ctx, pruneFilters)
}

// CopyFromContainer mocks base method.
func (m *MockDockerClientInterface) CopyFromContainer(ctx context.Context, container, srcPath string) (io.ReadCloser, types.ContainerPathStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFromContainer", ctx, container, srcPath)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(types.ContainerPathStat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CopyFromContainer indicates an expected call of CopyFromdockercontainer.
func (mr *MockDockerClientInterfaceMockRecorder) CopyFromContainer(ctx, container, srcPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFromContainer", reflect.TypeOf((*MockDockerClientInterface)(nil).CopyFromContainer), ctx, container, srcPath)
}

// CopyToContainer mocks base method.
func (m *MockDockerClientInterface) CopyToContainer(ctx context.Context, container, path string, content io.Reader, options types.CopyToContainerOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyToContainer", ctx, container, path, content, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyToContainer indicates an expected call of CopyTodockercontainer.
func (mr *MockDockerClientInterfaceMockRecorder) CopyToContainer(ctx, container, path, content, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyToContainer", reflect.TypeOf((*MockDockerClientInterface)(nil).CopyToContainer), ctx, container, path, content, options)
}

// DaemonHost mocks base method.
func (m *MockDockerClientInterface) DaemonHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DaemonHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// DaemonHost indicates an expected call of DaemonHost.
func (mr *MockDockerClientInterfaceMockRecorder) DaemonHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DaemonHost", reflect.TypeOf((*MockDockerClientInterface)(nil).DaemonHost))
}

// DialHijack mocks base method.
func (m *MockDockerClientInterface) DialHijack(ctx context.Context, url, proto string, meta map[string][]string) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialHijack", ctx, url, proto, meta)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialHijack indicates an expected call of DialHijack.
func (mr *MockDockerClientInterfaceMockRecorder) DialHijack(ctx, url, proto, meta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialHijack", reflect.TypeOf((*MockDockerClientInterface)(nil).DialHijack), ctx, url, proto, meta)
}

// Dialer mocks base method.
func (m *MockDockerClientInterface) Dialer() func(context.Context) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dialer")
	ret0, _ := ret[0].(func(context.Context) (net.Conn, error))
	return ret0
}

// Dialer indicates an expected call of Dialer.
func (mr *MockDockerClientInterfaceMockRecorder) Dialer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dialer", reflect.TypeOf((*MockDockerClientInterface)(nil).Dialer))
}

// DiskUsage mocks base method.
func (m *MockDockerClientInterface) DiskUsage(ctx context.Context, options types.DiskUsageOptions) (types.DiskUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiskUsage", ctx, options)
	ret0, _ := ret[0].(types.DiskUsage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiskUsage indicates an expected call of DiskUsage.
func (mr *MockDockerClientInterfaceMockRecorder) DiskUsage(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiskUsage", reflect.TypeOf((*MockDockerClientInterface)(nil).DiskUsage), ctx, options)
}

// DistributionInspect mocks base method.
func (m *MockDockerClientInterface) DistributionInspect(ctx context.Context, image, encodedRegistryAuth string) (registry.DistributionInspect, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistributionInspect", ctx, image, encodedRegistryAuth)
	ret0, _ := ret[0].(registry.DistributionInspect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistributionInspect indicates an expected call of DistributionInspect.
func (mr *MockDockerClientInterfaceMockRecorder) DistributionInspect(ctx, image, encodedRegistryAuth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributionInspect", reflect.TypeOf((*MockDockerClientInterface)(nil).DistributionInspect), ctx, image, encodedRegistryAuth)
}

// Events mocks base method.
func (m *MockDockerClientInterface) Events(ctx context.Context, options types.EventsOptions) (<-chan events.Message, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", ctx, options)
	ret0, _ := ret[0].(<-chan events.Message)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Events indicates an expected call of Events.
func (mr *MockDockerClientInterfaceMockRecorder) Events(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockDockerClientInterface)(nil).Events), ctx, options)
}

// HTTPClient mocks base method.
func (m *MockDockerClientInterface) HTTPClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// HTTPClient indicates an expected call of HTTPClient.
func (mr *MockDockerClientInterfaceMockRecorder) HTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPClient", reflect.TypeOf((*MockDockerClientInterface)(nil).HTTPClient))
}

// ImageBuild mocks base method.
func (m *MockDockerClientInterface) ImageBuild(ctx context.Context, context io.Reader, options types.ImageBuildOptions) (types.ImageBuildResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageBuild", ctx, context, options)
	ret0, _ := ret[0].(types.ImageBuildResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageBuild indicates an expected call of ImageBuild.
func (mr *MockDockerClientInterfaceMockRecorder) ImageBuild(ctx, context, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageBuild", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageBuild), ctx, context, options)
}

// ImageCreate mocks base method.
func (m *MockDockerClientInterface) ImageCreate(ctx context.Context, parentReference string, options types.ImageCreateOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageCreate", ctx, parentReference, options)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageCreate indicates an expected call of ImageCreate.
func (mr *MockDockerClientInterfaceMockRecorder) ImageCreate(ctx, parentReference, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageCreate", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageCreate), ctx, parentReference, options)
}

// ImageHistory mocks base method.
func (m *MockDockerClientInterface) ImageHistory(ctx context.Context, image string) ([]dockerimage.HistoryResponseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageHistory", ctx, image)
	ret0, _ := ret[0].([]dockerimage.HistoryResponseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageHistory indicates an expected call of ImageHistory.
func (mr *MockDockerClientInterfaceMockRecorder) ImageHistory(ctx, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageHistory", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageHistory), ctx, image)
}

// ImageImport mocks base method.
func (m *MockDockerClientInterface) ImageImport(ctx context.Context, source types.ImageImportSource, ref string, options types.ImageImportOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageImport", ctx, source, ref, options)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageImport indicates an expected call of ImageImport.
func (mr *MockDockerClientInterfaceMockRecorder) ImageImport(ctx, source, ref, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageImport", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageImport), ctx, source, ref, options)
}

// ImageInspectWithRaw mocks base method.
func (m *MockDockerClientInterface) ImageInspectWithRaw(ctx context.Context, image string) (types.ImageInspect, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageInspectWithRaw", ctx, image)
	ret0, _ := ret[0].(types.ImageInspect)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImageInspectWithRaw indicates an expected call of ImageInspectWithRaw.
func (mr *MockDockerClientInterfaceMockRecorder) ImageInspectWithRaw(ctx, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageInspectWithRaw", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageInspectWithRaw), ctx, image)
}

// ImageList mocks base method.
func (m *MockDockerClientInterface) ImageList(ctx context.Context, options types.ImageListOptions) ([]types.ImageSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageList", ctx, options)
	ret0, _ := ret[0].([]types.ImageSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageList indicates an expected call of ImageList.
func (mr *MockDockerClientInterfaceMockRecorder) ImageList(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageList", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageList), ctx, options)
}

// ImageLoad mocks base method.
func (m *MockDockerClientInterface) ImageLoad(ctx context.Context, input io.Reader, quiet bool) (types.ImageLoadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageLoad", ctx, input, quiet)
	ret0, _ := ret[0].(types.ImageLoadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageLoad indicates an expected call of ImageLoad.
func (mr *MockDockerClientInterfaceMockRecorder) ImageLoad(ctx, input, quiet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageLoad", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageLoad), ctx, input, quiet)
}

// ImagePull mocks base method.
func (m *MockDockerClientInterface) ImagePull(ctx context.Context, ref string, options types.ImagePullOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImagePull", ctx, ref, options)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImagePull indicates an expected call of ImagePull.
func (mr *MockDockerClientInterfaceMockRecorder) ImagePull(ctx, ref, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagePull", reflect.TypeOf((*MockDockerClientInterface)(nil).ImagePull), ctx, ref, options)
}

// ImagePush mocks base method.
func (m *MockDockerClientInterface) ImagePush(ctx context.Context, ref string, options types.ImagePushOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImagePush", ctx, ref, options)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImagePush indicates an expected call of ImagePush.
func (mr *MockDockerClientInterfaceMockRecorder) ImagePush(ctx, ref, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagePush", reflect.TypeOf((*MockDockerClientInterface)(nil).ImagePush), ctx, ref, options)
}

// ImageRemove mocks base method.
func (m *MockDockerClientInterface) ImageRemove(ctx context.Context, image string, options types.ImageRemoveOptions) ([]types.ImageDeleteResponseItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageRemove", ctx, image, options)
	ret0, _ := ret[0].([]types.ImageDeleteResponseItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageRemove indicates an expected call of ImageRemove.
func (mr *MockDockerClientInterfaceMockRecorder) ImageRemove(ctx, image, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageRemove", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageRemove), ctx, image, options)
}

// ImageSave mocks base method.
func (m *MockDockerClientInterface) ImageSave(ctx context.Context, images []string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageSave", ctx, images)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageSave indicates an expected call of ImageSave.
func (mr *MockDockerClientInterfaceMockRecorder) ImageSave(ctx, images interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageSave", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageSave), ctx, images)
}

// ImageSearch mocks base method.
func (m *MockDockerClientInterface) ImageSearch(ctx context.Context, term string, options types.ImageSearchOptions) ([]registry.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageSearch", ctx, term, options)
	ret0, _ := ret[0].([]registry.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageSearch indicates an expected call of ImageSearch.
func (mr *MockDockerClientInterfaceMockRecorder) ImageSearch(ctx, term, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageSearch", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageSearch), ctx, term, options)
}

// ImageTag mocks base method.
func (m *MockDockerClientInterface) ImageTag(ctx context.Context, image, ref string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageTag", ctx, image, ref)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImageTag indicates an expected call of ImageTag.
func (mr *MockDockerClientInterfaceMockRecorder) ImageTag(ctx, image, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageTag", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageTag), ctx, image, ref)
}

// ImagesPrune mocks base method.
func (m *MockDockerClientInterface) ImagesPrune(ctx context.Context, pruneFilter filters.Args) (types.ImagesPruneReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImagesPrune", ctx, pruneFilter)
	ret0, _ := ret[0].(types.ImagesPruneReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImagesPrune indicates an expected call of ImagesPrune.
func (mr *MockDockerClientInterfaceMockRecorder) ImagesPrune(ctx, pruneFilter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagesPrune", reflect.TypeOf((*MockDockerClientInterface)(nil).ImagesPrune), ctx, pruneFilter)
}

// Info mocks base method.
func (m *MockDockerClientInterface) Info(ctx context.Context) (types.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx)
	ret0, _ := ret[0].(types.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockDockerClientInterfaceMockRecorder) Info(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockDockerClientInterface)(nil).Info), ctx)
}

// NegotiateAPIVersion mocks base method.
func (m *MockDockerClientInterface) NegotiateAPIVersion(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NegotiateAPIVersion", ctx)
}

// NegotiateAPIVersion indicates an expected call of NegotiateAPIVersion.
func (mr *MockDockerClientInterfaceMockRecorder) NegotiateAPIVersion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NegotiateAPIVersion", reflect.TypeOf((*MockDockerClientInterface)(nil).NegotiateAPIVersion), ctx)
}

// NegotiateAPIVersionPing mocks base method.
func (m *MockDockerClientInterface) NegotiateAPIVersionPing(arg0 types.Ping) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NegotiateAPIVersionPing", arg0)
}

// NegotiateAPIVersionPing indicates an expected call of NegotiateAPIVersionPing.
func (mr *MockDockerClientInterfaceMockRecorder) NegotiateAPIVersionPing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NegotiateAPIVersionPing", reflect.TypeOf((*MockDockerClientInterface)(nil).NegotiateAPIVersionPing), arg0)
}

// NetworkConnect mocks base method.
func (m *MockDockerClientInterface) NetworkConnect(ctx context.Context, network, container string, config *network.EndpointSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkConnect", ctx, network, container, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// NetworkConnect indicates an expected call of NetworkConnect.
func (mr *MockDockerClientInterfaceMockRecorder) NetworkConnect(ctx, network, container, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkConnect", reflect.TypeOf((*MockDockerClientInterface)(nil).NetworkConnect), ctx, network, container, config)
}

// NetworkCreate mocks base method.
func (m *MockDockerClientInterface) NetworkCreate(ctx context.Context, name string, options types.NetworkCreate) (types.NetworkCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkCreate", ctx, name, options)
	ret0, _ := ret[0].(types.NetworkCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkCreate indicates an expected call of NetworkCreate.
func (mr *MockDockerClientInterfaceMockRecorder) NetworkCreate(ctx, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkCreate", reflect.TypeOf((*MockDockerClientInterface)(nil).NetworkCreate), ctx, name, options)
}

// NetworkDisconnect mocks base method.
func (m *MockDockerClientInterface) NetworkDisconnect(ctx context.Context, network, container string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkDisconnect", ctx, network, container, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// NetworkDisconnect indicates an expected call of NetworkDisconnect.
func (mr *MockDockerClientInterfaceMockRecorder) NetworkDisconnect(ctx, network, container, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkDisconnect", reflect.TypeOf((*MockDockerClientInterface)(nil).NetworkDisconnect), ctx, network, container, force)
}

// NetworkInspect mocks base method.
func (m *MockDockerClientInterface) NetworkInspect(ctx context.Context, network string, options types.NetworkInspectOptions) (types.NetworkResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkInspect", ctx, network, options)
	ret0, _ := ret[0].(types.NetworkResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkInspect indicates an expected call of NetworkInspect.
func (mr *MockDockerClientInterfaceMockRecorder) NetworkInspect(ctx, network, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkInspect", reflect.TypeOf((*MockDockerClientInterface)(nil).NetworkInspect), ctx, network, options)
}

// NetworkInspectWithRaw mocks base method.
func (m *MockDockerClientInterface) NetworkInspectWithRaw(ctx context.Context, network string, options types.NetworkInspectOptions) (types.NetworkResource, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkInspectWithRaw", ctx, network, options)
	ret0, _ := ret[0].(types.NetworkResource)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NetworkInspectWithRaw indicates an expected call of NetworkInspectWithRaw.
func (mr *MockDockerClientInterfaceMockRecorder) NetworkInspectWithRaw(ctx, network, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkInspectWithRaw", reflect.TypeOf((*MockDockerClientInterface)(nil).NetworkInspectWithRaw), ctx, network, options)
}

// NetworkList mocks base method.
func (m *MockDockerClientInterface) NetworkList(ctx context.Context, options types.NetworkListOptions) ([]types.NetworkResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkList", ctx, options)
	ret0, _ := ret[0].([]types.NetworkResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkList indicates an expected call of NetworkList.
func (mr *MockDockerClientInterfaceMockRecorder) NetworkList(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkList", reflect.TypeOf((*MockDockerClientInterface)(nil).NetworkList), ctx, options)
}

// NetworkRemove mocks base method.
func (m *MockDockerClientInterface) NetworkRemove(ctx context.Context, network string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkRemove", ctx, network)
	ret0, _ := ret[0].(error)
	return ret0
}

// NetworkRemove indicates an expected call of NetworkRemove.
func (mr *MockDockerClientInterfaceMockRecorder) NetworkRemove(ctx, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkRemove", reflect.TypeOf((*MockDockerClientInterface)(nil).NetworkRemove), ctx, network)
}

// NetworksPrune mocks base method.
func (m *MockDockerClientInterface) NetworksPrune(ctx context.Context, pruneFilter filters.Args) (types.NetworksPruneReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworksPrune", ctx, pruneFilter)
	ret0, _ := ret[0].(types.NetworksPruneReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworksPrune indicates an expected call of NetworksPrune.
func (mr *MockDockerClientInterfaceMockRecorder) NetworksPrune(ctx, pruneFilter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworksPrune", reflect.TypeOf((*MockDockerClientInterface)(nil).NetworksPrune), ctx, pruneFilter)
}

// NodeInspectWithRaw mocks base method.
func (m *MockDockerClientInterface) NodeInspectWithRaw(ctx context.Context, nodeID string) (swarm.Node, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeInspectWithRaw", ctx, nodeID)
	ret0, _ := ret[0].(swarm.Node)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NodeInspectWithRaw indicates an expected call of NodeInspectWithRaw.
func (mr *MockDockerClientInterfaceMockRecorder) NodeInspectWithRaw(ctx, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeInspectWithRaw", reflect.TypeOf((*MockDockerClientInterface)(nil).NodeInspectWithRaw), ctx, nodeID)
}

// NodeList mocks base method.
func (m *MockDockerClientInterface) NodeList(ctx context.Context, options types.NodeListOptions) ([]swarm.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeList", ctx, options)
	ret0, _ := ret[0].([]swarm.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeList indicates an expected call of NodeList.
func (mr *MockDockerClientInterfaceMockRecorder) NodeList(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeList", reflect.TypeOf((*MockDockerClientInterface)(nil).NodeList), ctx, options)
}

// NodeRemove mocks base method.
func (m *MockDockerClientInterface) NodeRemove(ctx context.Context, nodeID string, options types.NodeRemoveOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeRemove", ctx, nodeID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// NodeRemove indicates an expected call of NodeRemove.
func (mr *MockDockerClientInterfaceMockRecorder) NodeRemove(ctx, nodeID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeRemove", reflect.TypeOf((*MockDockerClientInterface)(nil).NodeRemove), ctx, nodeID, options)
}

// NodeUpdate mocks base method.
func (m *MockDockerClientInterface) NodeUpdate(ctx context.Context, nodeID string, version swarm.Version, node swarm.NodeSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeUpdate", ctx, nodeID, version, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// NodeUpdate indicates an expected call of NodeUpdate.
func (mr *MockDockerClientInterfaceMockRecorder) NodeUpdate(ctx, nodeID, version, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeUpdate", reflect.TypeOf((*MockDockerClientInterface)(nil).NodeUpdate), ctx, nodeID, version, node)
}

// Ping mocks base method.
func (m *MockDockerClientInterface) Ping(ctx context.Context) (types.Ping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(types.Ping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockDockerClientInterfaceMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDockerClientInterface)(nil).Ping), ctx)
}

// PluginCreate mocks base method.
func (m *MockDockerClientInterface) PluginCreate(ctx context.Context, createContext io.Reader, options types.PluginCreateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginCreate", ctx, createContext, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginCreate indicates an expected call of PluginCreate.
func (mr *MockDockerClientInterfaceMockRecorder) PluginCreate(ctx, createContext, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginCreate", reflect.TypeOf((*MockDockerClientInterface)(nil).PluginCreate), ctx, createContext, options)
}

// PluginDisable mocks base method.
func (m *MockDockerClientInterface) PluginDisable(ctx context.Context, name string, options types.PluginDisableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginDisable", ctx, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginDisable indicates an expected call of PluginDisable.
func (mr *MockDockerClientInterfaceMockRecorder) PluginDisable(ctx, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginDisable", reflect.TypeOf((*MockDockerClientInterface)(nil).PluginDisable), ctx, name, options)
}

// PluginEnable mocks base method.
func (m *MockDockerClientInterface) PluginEnable(ctx context.Context, name string, options types.PluginEnableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginEnable", ctx, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginEnable indicates an expected call of PluginEnable.
func (mr *MockDockerClientInterfaceMockRecorder) PluginEnable(ctx, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginEnable", reflect.TypeOf((*MockDockerClientInterface)(nil).PluginEnable), ctx, name, options)
}

// PluginInspectWithRaw mocks base method.
func (m *MockDockerClientInterface) PluginInspectWithRaw(ctx context.Context, name string) (*types.Plugin, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginInspectWithRaw", ctx, name)
	ret0, _ := ret[0].(*types.Plugin)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PluginInspectWithRaw indicates an expected call of PluginInspectWithRaw.
func (mr *MockDockerClientInterfaceMockRecorder) PluginInspectWithRaw(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginInspectWithRaw", reflect.TypeOf((*MockDockerClientInterface)(nil).PluginInspectWithRaw), ctx, name)
}

// PluginInstall mocks base method.
func (m *MockDockerClientInterface) PluginInstall(ctx context.Context, name string, options types.PluginInstallOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginInstall", ctx, name, options)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginInstall indicates an expected call of PluginInstall.
func (mr *MockDockerClientInterfaceMockRecorder) PluginInstall(ctx, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginInstall", reflect.TypeOf((*MockDockerClientInterface)(nil).PluginInstall), ctx, name, options)
}

// PluginList mocks base method.
func (m *MockDockerClientInterface) PluginList(ctx context.Context, filter filters.Args) (types.PluginsListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginList", ctx, filter)
	ret0, _ := ret[0].(types.PluginsListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginList indicates an expected call of PluginList.
func (mr *MockDockerClientInterfaceMockRecorder) PluginList(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginList", reflect.TypeOf((*MockDockerClientInterface)(nil).PluginList), ctx, filter)
}

// PluginPush mocks base method.
func (m *MockDockerClientInterface) PluginPush(ctx context.Context, name, registryAuth string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginPush", ctx, name, registryAuth)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginPush indicates an expected call of PluginPush.
func (mr *MockDockerClientInterfaceMockRecorder) PluginPush(ctx, name, registryAuth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginPush", reflect.TypeOf((*MockDockerClientInterface)(nil).PluginPush), ctx, name, registryAuth)
}

// PluginRemove mocks base method.
func (m *MockDockerClientInterface) PluginRemove(ctx context.Context, name string, options types.PluginRemoveOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginRemove", ctx, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginRemove indicates an expected call of PluginRemove.
func (mr *MockDockerClientInterfaceMockRecorder) PluginRemove(ctx, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginRemove", reflect.TypeOf((*MockDockerClientInterface)(nil).PluginRemove), ctx, name, options)
}

// PluginSet mocks base method.
func (m *MockDockerClientInterface) PluginSet(ctx context.Context, name string, args []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginSet", ctx, name, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// PluginSet indicates an expected call of PluginSet.
func (mr *MockDockerClientInterfaceMockRecorder) PluginSet(ctx, name, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginSet", reflect.TypeOf((*MockDockerClientInterface)(nil).PluginSet), ctx, name, args)
}

// PluginUpgrade mocks base method.
func (m *MockDockerClientInterface) PluginUpgrade(ctx context.Context, name string, options types.PluginInstallOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginUpgrade", ctx, name, options)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginUpgrade indicates an expected call of PluginUpgrade.
func (mr *MockDockerClientInterfaceMockRecorder) PluginUpgrade(ctx, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginUpgrade", reflect.TypeOf((*MockDockerClientInterface)(nil).PluginUpgrade), ctx, name, options)
}

// RegistryLogin mocks base method.
func (m *MockDockerClientInterface) RegistryLogin(ctx context.Context, auth registry.AuthConfig) (registry.AuthenticateOKBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistryLogin", ctx, auth)
	ret0, _ := ret[0].(registry.AuthenticateOKBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistryLogin indicates an expected call of RegistryLogin.
func (mr *MockDockerClientInterfaceMockRecorder) RegistryLogin(ctx, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryLogin", reflect.TypeOf((*MockDockerClientInterface)(nil).RegistryLogin), ctx, auth)
}

// SecretCreate mocks base method.
func (m *MockDockerClientInterface) SecretCreate(ctx context.Context, secret swarm.SecretSpec) (types.SecretCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretCreate", ctx, secret)
	ret0, _ := ret[0].(types.SecretCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretCreate indicates an expected call of SecretCreate.
func (mr *MockDockerClientInterfaceMockRecorder) SecretCreate(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretCreate", reflect.TypeOf((*MockDockerClientInterface)(nil).SecretCreate), ctx, secret)
}

// SecretInspectWithRaw mocks base method.
func (m *MockDockerClientInterface) SecretInspectWithRaw(ctx context.Context, name string) (swarm.Secret, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretInspectWithRaw", ctx, name)
	ret0, _ := ret[0].(swarm.Secret)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SecretInspectWithRaw indicates an expected call of SecretInspectWithRaw.
func (mr *MockDockerClientInterfaceMockRecorder) SecretInspectWithRaw(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretInspectWithRaw", reflect.TypeOf((*MockDockerClientInterface)(nil).SecretInspectWithRaw), ctx, name)
}

// SecretList mocks base method.
func (m *MockDockerClientInterface) SecretList(ctx context.Context, options types.SecretListOptions) ([]swarm.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretList", ctx, options)
	ret0, _ := ret[0].([]swarm.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecretList indicates an expected call of SecretList.
func (mr *MockDockerClientInterfaceMockRecorder) SecretList(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretList", reflect.TypeOf((*MockDockerClientInterface)(nil).SecretList), ctx, options)
}

// SecretRemove mocks base method.
func (m *MockDockerClientInterface) SecretRemove(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretRemove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretRemove indicates an expected call of SecretRemove.
func (mr *MockDockerClientInterfaceMockRecorder) SecretRemove(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretRemove", reflect.TypeOf((*MockDockerClientInterface)(nil).SecretRemove), ctx, id)
}

// SecretUpdate mocks base method.
func (m *MockDockerClientInterface) SecretUpdate(ctx context.Context, id string, version swarm.Version, secret swarm.SecretSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretUpdate", ctx, id, version, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretUpdate indicates an expected call of SecretUpdate.
func (mr *MockDockerClientInterfaceMockRecorder) SecretUpdate(ctx, id, version, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretUpdate", reflect.TypeOf((*MockDockerClientInterface)(nil).SecretUpdate), ctx, id, version, secret)
}

// ServerVersion mocks base method.
func (m *MockDockerClientInterface) ServerVersion(ctx context.Context) (types.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerVersion", ctx)
	ret0, _ := ret[0].(types.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerVersion indicates an expected call of ServerVersion.
func (mr *MockDockerClientInterfaceMockRecorder) ServerVersion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerVersion", reflect.TypeOf((*MockDockerClientInterface)(nil).ServerVersion), ctx)
}

// ServiceCreate mocks base method.
func (m *MockDockerClientInterface) ServiceCreate(ctx context.Context, service swarm.ServiceSpec, options types.ServiceCreateOptions) (types.ServiceCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceCreate", ctx, service, options)
	ret0, _ := ret[0].(types.ServiceCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceCreate indicates an expected call of ServiceCreate.
func (mr *MockDockerClientInterfaceMockRecorder) ServiceCreate(ctx, service, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCreate", reflect.TypeOf((*MockDockerClientInterface)(nil).ServiceCreate), ctx, service, options)
}

// ServiceInspectWithRaw mocks base method.
func (m *MockDockerClientInterface) ServiceInspectWithRaw(ctx context.Context, serviceID string, options types.ServiceInspectOptions) (swarm.Service, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceInspectWithRaw", ctx, serviceID, options)
	ret0, _ := ret[0].(swarm.Service)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServiceInspectWithRaw indicates an expected call of ServiceInspectWithRaw.
func (mr *MockDockerClientInterfaceMockRecorder) ServiceInspectWithRaw(ctx, serviceID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceInspectWithRaw", reflect.TypeOf((*MockDockerClientInterface)(nil).ServiceInspectWithRaw), ctx, serviceID, options)
}

// ServiceList mocks base method.
func (m *MockDockerClientInterface) ServiceList(ctx context.Context, options types.ServiceListOptions) ([]swarm.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceList", ctx, options)
	ret0, _ := ret[0].([]swarm.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceList indicates an expected call of ServiceList.
func (mr *MockDockerClientInterfaceMockRecorder) ServiceList(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceList", reflect.TypeOf((*MockDockerClientInterface)(nil).ServiceList), ctx, options)
}

// ServiceLogs mocks base method.
func (m *MockDockerClientInterface) ServiceLogs(ctx context.Context, serviceID string, options types.ContainerLogsOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceLogs", ctx, serviceID, options)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceLogs indicates an expected call of ServiceLogs.
func (mr *MockDockerClientInterfaceMockRecorder) ServiceLogs(ctx, serviceID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceLogs", reflect.TypeOf((*MockDockerClientInterface)(nil).ServiceLogs), ctx, serviceID, options)
}

// ServiceRemove mocks base method.
func (m *MockDockerClientInterface) ServiceRemove(ctx context.Context, serviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceRemove", ctx, serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceRemove indicates an expected call of ServiceRemove.
func (mr *MockDockerClientInterfaceMockRecorder) ServiceRemove(ctx, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceRemove", reflect.TypeOf((*MockDockerClientInterface)(nil).ServiceRemove), ctx, serviceID)
}

// ServiceUpdate mocks base method.
func (m *MockDockerClientInterface) ServiceUpdate(ctx context.Context, serviceID string, version swarm.Version, service swarm.ServiceSpec, options types.ServiceUpdateOptions) (types.ServiceUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceUpdate", ctx, serviceID, version, service, options)
	ret0, _ := ret[0].(types.ServiceUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceUpdate indicates an expected call of ServiceUpdate.
func (mr *MockDockerClientInterfaceMockRecorder) ServiceUpdate(ctx, serviceID, version, service, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceUpdate", reflect.TypeOf((*MockDockerClientInterface)(nil).ServiceUpdate), ctx, serviceID, version, service, options)
}

// SwarmGetUnlockKey mocks base method.
func (m *MockDockerClientInterface) SwarmGetUnlockKey(ctx context.Context) (types.SwarmUnlockKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwarmGetUnlockKey", ctx)
	ret0, _ := ret[0].(types.SwarmUnlockKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwarmGetUnlockKey indicates an expected call of SwarmGetUnlockKey.
func (mr *MockDockerClientInterfaceMockRecorder) SwarmGetUnlockKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwarmGetUnlockKey", reflect.TypeOf((*MockDockerClientInterface)(nil).SwarmGetUnlockKey), ctx)
}

// SwarmInit mocks base method.
func (m *MockDockerClientInterface) SwarmInit(ctx context.Context, req swarm.InitRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwarmInit", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwarmInit indicates an expected call of SwarmInit.
func (mr *MockDockerClientInterfaceMockRecorder) SwarmInit(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwarmInit", reflect.TypeOf((*MockDockerClientInterface)(nil).SwarmInit), ctx, req)
}

// SwarmInspect mocks base method.
func (m *MockDockerClientInterface) SwarmInspect(ctx context.Context) (swarm.Swarm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwarmInspect", ctx)
	ret0, _ := ret[0].(swarm.Swarm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwarmInspect indicates an expected call of SwarmInspect.
func (mr *MockDockerClientInterfaceMockRecorder) SwarmInspect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwarmInspect", reflect.TypeOf((*MockDockerClientInterface)(nil).SwarmInspect), ctx)
}

// SwarmJoin mocks base method.
func (m *MockDockerClientInterface) SwarmJoin(ctx context.Context, req swarm.JoinRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwarmJoin", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwarmJoin indicates an expected call of SwarmJoin.
func (mr *MockDockerClientInterfaceMockRecorder) SwarmJoin(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwarmJoin", reflect.TypeOf((*MockDockerClientInterface)(nil).SwarmJoin), ctx, req)
}

// SwarmLeave mocks base method.
func (m *MockDockerClientInterface) SwarmLeave(ctx context.Context, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwarmLeave", ctx, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwarmLeave indicates an expected call of SwarmLeave.
func (mr *MockDockerClientInterfaceMockRecorder) SwarmLeave(ctx, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwarmLeave", reflect.TypeOf((*MockDockerClientInterface)(nil).SwarmLeave), ctx, force)
}

// SwarmUnlock mocks base method.
func (m *MockDockerClientInterface) SwarmUnlock(ctx context.Context, req swarm.UnlockRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwarmUnlock", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwarmUnlock indicates an expected call of SwarmUnlock.
func (mr *MockDockerClientInterfaceMockRecorder) SwarmUnlock(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwarmUnlock", reflect.TypeOf((*MockDockerClientInterface)(nil).SwarmUnlock), ctx, req)
}

// SwarmUpdate mocks base method.
func (m *MockDockerClientInterface) SwarmUpdate(ctx context.Context, version swarm.Version, swarm swarm.Spec, flags swarm.UpdateFlags) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwarmUpdate", ctx, version, swarm, flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwarmUpdate indicates an expected call of SwarmUpdate.
func (mr *MockDockerClientInterfaceMockRecorder) SwarmUpdate(ctx, version, swarm, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwarmUpdate", reflect.TypeOf((*MockDockerClientInterface)(nil).SwarmUpdate), ctx, version, swarm, flags)
}

// TaskInspectWithRaw mocks base method.
func (m *MockDockerClientInterface) TaskInspectWithRaw(ctx context.Context, taskID string) (swarm.Task, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskInspectWithRaw", ctx, taskID)
	ret0, _ := ret[0].(swarm.Task)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TaskInspectWithRaw indicates an expected call of TaskInspectWithRaw.
func (mr *MockDockerClientInterfaceMockRecorder) TaskInspectWithRaw(ctx, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskInspectWithRaw", reflect.TypeOf((*MockDockerClientInterface)(nil).TaskInspectWithRaw), ctx, taskID)
}

// TaskList mocks base method.
func (m *MockDockerClientInterface) TaskList(ctx context.Context, options types.TaskListOptions) ([]swarm.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskList", ctx, options)
	ret0, _ := ret[0].([]swarm.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskList indicates an expected call of TaskList.
func (mr *MockDockerClientInterfaceMockRecorder) TaskList(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskList", reflect.TypeOf((*MockDockerClientInterface)(nil).TaskList), ctx, options)
}

// TaskLogs mocks base method.
func (m *MockDockerClientInterface) TaskLogs(ctx context.Context, taskID string, options types.ContainerLogsOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskLogs", ctx, taskID, options)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskLogs indicates an expected call of TaskLogs.
func (mr *MockDockerClientInterfaceMockRecorder) TaskLogs(ctx, taskID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskLogs", reflect.TypeOf((*MockDockerClientInterface)(nil).TaskLogs), ctx, taskID, options)
}

// VolumeCreate mocks base method.
func (m *MockDockerClientInterface) VolumeCreate(ctx context.Context, options volume.CreateOptions) (volume.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeCreate", ctx, options)
	ret0, _ := ret[0].(volume.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeCreate indicates an expected call of VolumeCreate.
func (mr *MockDockerClientInterfaceMockRecorder) VolumeCreate(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCreate", reflect.TypeOf((*MockDockerClientInterface)(nil).VolumeCreate), ctx, options)
}

// VolumeInspect mocks base method.
func (m *MockDockerClientInterface) VolumeInspect(ctx context.Context, volumeID string) (volume.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeInspect", ctx, volumeID)
	ret0, _ := ret[0].(volume.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeInspect indicates an expected call of VolumeInspect.
func (mr *MockDockerClientInterfaceMockRecorder) VolumeInspect(ctx, volumeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeInspect", reflect.TypeOf((*MockDockerClientInterface)(nil).VolumeInspect), ctx, volumeID)
}

// VolumeInspectWithRaw mocks base method.
func (m *MockDockerClientInterface) VolumeInspectWithRaw(ctx context.Context, volumeID string) (volume.Volume, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeInspectWithRaw", ctx, volumeID)
	ret0, _ := ret[0].(volume.Volume)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VolumeInspectWithRaw indicates an expected call of VolumeInspectWithRaw.
func (mr *MockDockerClientInterfaceMockRecorder) VolumeInspectWithRaw(ctx, volumeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeInspectWithRaw", reflect.TypeOf((*MockDockerClientInterface)(nil).VolumeInspectWithRaw), ctx, volumeID)
}

// VolumeList mocks base method.
func (m *MockDockerClientInterface) VolumeList(ctx context.Context, options volume.ListOptions) (volume.ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeList", ctx, options)
	ret0, _ := ret[0].(volume.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeList indicates an expected call of VolumeList.
func (mr *MockDockerClientInterfaceMockRecorder) VolumeList(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeList", reflect.TypeOf((*MockDockerClientInterface)(nil).VolumeList), ctx, options)
}

// VolumeRemove mocks base method.
func (m *MockDockerClientInterface) VolumeRemove(ctx context.Context, volumeID string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeRemove", ctx, volumeID, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeRemove indicates an expected call of VolumeRemove.
func (mr *MockDockerClientInterfaceMockRecorder) VolumeRemove(ctx, volumeID, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeRemove", reflect.TypeOf((*MockDockerClientInterface)(nil).VolumeRemove), ctx, volumeID, force)
}

// VolumeUpdate mocks base method.
func (m *MockDockerClientInterface) VolumeUpdate(ctx context.Context, volumeID string, version swarm.Version, options volume.UpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeUpdate", ctx, volumeID, version, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// VolumeUpdate indicates an expected call of VolumeUpdate.
func (mr *MockDockerClientInterfaceMockRecorder) VolumeUpdate(ctx, volumeID, version, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeUpdate", reflect.TypeOf((*MockDockerClientInterface)(nil).VolumeUpdate), ctx, volumeID, version, options)
}

// VolumesPrune mocks base method.
func (m *MockDockerClientInterface) VolumesPrune(ctx context.Context, pruneFilter filters.Args) (types.VolumesPruneReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumesPrune", ctx, pruneFilter)
	ret0, _ := ret[0].(types.VolumesPruneReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumesPrune indicates an expected call of VolumesPrune.
func (mr *MockDockerClientInterfaceMockRecorder) VolumesPrune(ctx, pruneFilter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumesPrune", reflect.TypeOf((*MockDockerClientInterface)(nil).VolumesPrune), ctx, pruneFilter)
}

// MockSubmissionTaskServiceInterface is a mock of SubmissionTaskServiceInterface interface.
type MockSubmissionTaskServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSubmissionTaskServiceInterfaceMockRecorder
}

// MockSubmissionTaskServiceInterfaceMockRecorder is the mock recorder for MockSubmissionTaskServiceInterface.
type MockSubmissionTaskServiceInterfaceMockRecorder struct {
	mock *MockSubmissionTaskServiceInterface
}

// NewMockSubmissionTaskServiceInterface creates a new mock instance.
func NewMockSubmissionTaskServiceInterface(ctrl *gomock.Controller) *MockSubmissionTaskServiceInterface {
	mock := &MockSubmissionTaskServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSubmissionTaskServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubmissionTaskServiceInterface) EXPECT() *MockSubmissionTaskServiceInterfaceMockRecorder {
	return m.recorder
}

// RunSubmission mocks base method.
func (m *MockSubmissionTaskServiceInterface) RunSubmission(arg0 context.Context, arg1 *submission_tasks.SubmissionTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSubmission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSubmission indicates an expected call of RunSubmission.
func (mr *MockSubmissionTaskServiceInterfaceMockRecorder) RunSubmission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSubmission", reflect.TypeOf((*MockSubmissionTaskServiceInterface)(nil).RunSubmission), arg0, arg1)
}
